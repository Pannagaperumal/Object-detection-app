name: Security Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly scan on Sunday

jobs:
  scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read # for git checkout
      security-events: write # for uploading security results
    
    steps:
    - uses: actions/checkout@v3
    
    # Cache Trivy vulnerability database
    - name: Cache Trivy vulnerability database
      uses: actions/cache@v3
      with:
        path: ~/.cache/trivy
        key: ${{ runner.os }}-trivy-${{ hashFiles('**/*.lock') }}
        restore-keys: |
          ${{ runner.os }}-trivy-
    
    # Install Trivy with alternative method
    - name: Install Trivy
      run: |
        sudo apt-get install wget apt-transport-https gnupg lsb-release -y
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy -y
    
    # Scan Backend with authentication
    - name: Scan Backend
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        trivy fs \
          --cache-dir ~/.cache/trivy \
          --format table \
          --exit-code 0 \
          --severity HIGH,CRITICAL \
          --ignore-unfixed \
          --scanners vuln,secret,config \
          ./backend
    
    # Scan Frontend with authentication
    - name: Scan Frontend
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        trivy fs \
          --cache-dir ~/.cache/trivy \
          --format table \
          --exit-code 0 \
          --severity HIGH,CRITICAL \
          --ignore-unfixed \
          --scanners vuln,secret,config \
          ./frontend
    
    # Generate SARIF report for GitHub Security tab
    - name: Generate SARIF report
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        trivy fs \
          --cache-dir ~/.cache/trivy \
          --format sarif \
          --output trivy-results.sarif \
          --exit-code 0 \
          --severity HIGH,CRITICAL \
          --ignore-unfixed \
          --scanners vuln,secret,config \
          .
    
    # Upload SARIF report
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        wait-for-processing: true
